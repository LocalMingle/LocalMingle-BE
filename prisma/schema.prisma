// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 사용자 모델
model User {
  userId       Int       @id @default(autoincrement()) // Primary Key
  email        String    @unique
  password     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? // null이면 삭제되지 않은 것으로 간주
  refreshToken String?   @db.Text

  UserDetail    UserDetail[]
  HostEvents    HostEvent[]
  GuestEvents   GuestEvent[]
  EventBookmark EventBookmark[]
  Notifications Notifications[]


  @@map("User")
}

// 사용자 정보 모델
model UserDetail {
  userDetailId Int     @id @default(autoincrement()) // Primary Key
  UserId       Int // Foreign Key
  nickname     String  @unique
  intro        String?
  profileImg   String?
  userLocation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User     User      @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  Viewlogs Viewlog[]
  RsvpLogs RsvpLog[]

  @@map("UserInfo")
}

// 이벤트 모델
model Event {
  eventId         Int      @id @default(autoincrement()) // Primary Key
  eventName       String
  maxSize         Int
  eventDate       DateTime
  signupStartDate DateTime
  signupEndDate   DateTime
  eventImg        String?
  location_City   String
  location_District String
  content         String
  category        String
  isVerified      String?
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  HostEvents    HostEvent[]
  GuestEvents   GuestEvent[]
  Viewlogs      Viewlog[]
  Category      Category[]
  RsvpLog       RsvpLog[]
  EventBookmark EventBookmark[]
  Notifications Notifications[]

  @@map("Event")
}

// 북마크한 이벤트 모델
model EventBookmark {
  eventBookmarkId Int       @id @default(autoincrement()) // Primary Key
  EventId         Int
  UserId          Int
  status          String // "bookmarked", "unbookmarked"
  updatedAt       DateTime?

  Event Event @relation(fields: [EventId], references: [eventId])
  User  User  @relation(fields: [UserId], references: [userId])

  @@map("EventBookmark")
}

// 조회 기록 모델
model Viewlog {
  viewlogId Int @id @default(autoincrement()) // Primary Key
  EventId   Int
  UserId    Int

  Event      Event      @relation(fields: [EventId], references: [eventId])
  UserDetail UserDetail @relation(fields: [UserId], references: [userDetailId])

  @@map("Viewlog")
}

// 참가 신청/취소 기록 모델
model RsvpLog {
  rsvpLogId Int      @id @default(autoincrement()) // Primary Key
  EventId   Int
  UserId    Int
  status    String // 'applied', 'canceled' 등의 상태
  createdAt DateTime @default(now()) // 참석 신청이나 취소가 이루어진 시간

  Event      Event      @relation(fields: [EventId], references: [eventId])
  UserDetail UserDetail @relation(fields: [UserId], references: [userDetailId])

  @@map("RsvpLog")
}

// 호스트 이벤트 매핑 모델
model HostEvent {
  hostEventId Int @id @default(autoincrement()) // Primary Key
  HostId      Int // Foreign Key
  EventId     Int // Foreign Key

  Event Event @relation(fields: [EventId], references: [eventId], onDelete: Cascade)
  User  User  @relation(fields: [HostId], references: [userId], onDelete: Cascade)

  @@map("HostEvent")
}

model Category {
  categoryId Int    @id @default(autoincrement()) // Primary Key
  EventId    Int? // Foreign Key
  name       String

  Event Event? @relation(fields: [EventId], references: [eventId], onDelete: Cascade)
}

// 게스트 이벤트 매핑 모델
model GuestEvent {
  guestEventId Int  @id @default(autoincrement()) // Primary Key
  GuestId      Int? // Foreign Key
  EventId      Int // Foreign Key

  Event Event @relation(fields: [EventId], references: [eventId], onDelete: Cascade)
  User  User? @relation(fields: [GuestId], references: [userId], onDelete: Cascade)

  @@map("GuestEvent")
}

model Region {
  RegionId Int    @id @default(autoincrement())
  doName   String
  guName   String
}

model Notifications {
  notificationId   Int      @id @default(autoincrement()) @map("id")
  title     String
  content   String
  createdAt DateTime @default(now())
  EventId   Int? // Foreign Key
  UserId    Int? // Foreign Key // receiverId

  Event Event? @relation(fields: [EventId], references: [eventId], onDelete: Cascade)
  User  User?  @relation(fields: [UserId], references: [userId], onDelete: Cascade)
}